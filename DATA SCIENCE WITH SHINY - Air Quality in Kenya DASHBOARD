# REFRESHER ON R
library(shiny)
library(DT)
library(ggplot2)
library(leaflet)
library(plotly)

# Load the extended imaginary air quality dataset
mydata <- read.csv("air_quality_kenya.csv")

# _______________"air_quality_kenya.csv"___________________
#Date,Location,PM2.5,PM10,NO2,SO2,CO,Latitude,Longitude
#2023-08-01,Nairobi,18.5,27.2,12.3,3.2,0.8,-1.286389,36.817223
#2023-08-01,Kisumu,12.1,20.5,9.8,2.5,0.6,-0.102222,34.761944
#2023-08-01,Mombasa,24.3,35.7,15.6,4.1,1.1,-4.043056,39.668889
#2023-08-01,Nakuru,14.8,22.6,11.2,2.9,0.7,-0.303611,36.080556
#2023-08-01,Eldoret,13.2,21.8,10.6,2.7,0.7,0.520000,35.269444
#2023-08-02,Nairobi,17.9,26.5,11.8,3.1,0.7,-1.286389,36.817223
#2023-08-02,Kisumu,11.8,19.8,9.6,2.4,0.5,-0.102222,34.761944
#2023-08-02,Mombasa,23.5,34.2,15.0,3.9,1.0,-4.043056,39.668889
#2023-08-02,Nakuru,14.2,21.9,11.0,2.8,0.6,-0.303611,36.080556
#2023-08-02,Eldoret,12.8,21.0,10.3,2.6,0.6,0.520000,35.269444
#2023-08-03,Nairobi,19.2,27.8,12.5,3.3,0.9,-1.286389,36.817223
#2023-08-03,Kisumu,12.3,20.8,10.0,2.6,0.6,-0.102222,34.761944
#2023-08-03,Mombasa,24.7,36.2,15.8,4.2,1.2,-4.043056,39.668889
#2023-08-03,Nakuru,14.5,22.2,11.4,3.0,0.7,-0.303611,36.080556
#2023-08-03,Eldoret,13.4,22.3,10.7,2.8,0.7,0.520000,35.269444
#2023-08-04,Nairobi,18.9,27.5,12.1,3.4,0.9,-1.286389,36.817223
#2023-08-04,Kisumu,12.5,21.0,10.2,2.7,0.6,-0.102222,34.761944
#2023-08-04,Mombasa,24.4,35.5,15.5,4.0,1.1,-4.043056,39.668889
#2023-08-04,Nakuru,14.6,22.4,11.1,2.9,0.7,-0.303611,36.080556
#2023-08-04,Eldoret,13.5,22.5,10.5,2.7,0.7,0.520000,35.269444
# ____________________________________________________________

# Define UI
ui <- fluidPage(
  titlePanel("Kenya Air Quality Dashboard"),
  
  sidebarLayout(
    sidebarPanel(
      # Input: Select city
      selectInput("city", "Select City:", choices = unique(mydata$Location)),
      
      # Input: Select pollutant
      selectInput("pollutant", "Select Pollutant:", choices = colnames(mydata)[3:7]),
      
      # Input: Select plot type
      selectInput("plot_type", "Select Plot Type:",
                  choices = c("Line Plot", "Bar Chart", "Boxplot")),
      
      # Create a tabsetPanel for different inputs
      tabsetPanel(
        id = "tabs",
        tabPanel("All Cities Comparison",
                 # Input: Select parameter for all cities comparison
                 selectInput("all_cities_parameter", "Select Parameter for All Cities Comparison:", 
                             choices = colnames(mydata)[3:7]))
      )
    ),
    
    mainPanel(
      # Output: Data table
      DTOutput("data_table"),
      
      # Output: Map
      leafletOutput("map"),
      
      # Output: Plot
      uiOutput("selected_plot_ui"),
      
      # Output: Pie chart for all cities comparison
      plotlyOutput("all_cities_piechart"),
      
      # Output: Boxplot for all cities comparison
      plotOutput("all_cities_boxplot")
    )
  )
)

# Define server
server <- function(input, output, session) {
  # Filter data based on user selections
  filtered_data <- reactive({
    mydata %>%
      filter(Location == input$city)
  })
  
  # Render data table
  output$data_table <- renderDT({
    datatable(filtered_data(), options = list(pageLength = 10))
  })
  
  # Render map
  output$map <- renderLeaflet({
    leaflet(filtered_data()) %>%
      addTiles() %>%
      addMarkers(~Longitude, ~Latitude, popup = ~Location)
  })
  
  # Render selected plot based on user's choice using renderUI
  output$selected_plot_ui <- renderUI({
    plot_data <- filtered_data()
    
    if (input$plot_type == "Line Plot") {
      plotOutput("line_plot")
    } else if (input$plot_type == "Bar Chart") {
      plotOutput("bar_chart")
    } else if (input$plot_type == "Boxplot") {
      plotOutput("box_plot")
    }
  })
  
  # Line Plot
  output$line_plot <- renderPlot({
    plot_data <- filtered_data()
    ggplot(plot_data, aes(x = Date, y = .data[[input$pollutant]], color = Location, group = Location)) +
      geom_line() +
      geom_text(aes(label = round(.data[[input$pollutant]], 1), group = Location), nudge_x = 0.1, nudge_y = 0.05, size = 3) +
      labs(title = paste(input$pollutant, "LEVELS FOR",  toupper(input$city)),
           x = "Date", y = input$pollutant)
  })
  
  # Bar Chart
  output$bar_chart <- renderPlot({
    plot_data <- filtered_data()
    ggplot(plot_data, aes(x = Date, y = .data[[input$pollutant]], fill = Date)) +
      geom_bar(stat = "identity", position = position_dodge(width = 0.9)) +
      geom_text(aes(label = round(.data[[input$pollutant]], 1)), position = position_dodge(width = 0.9), vjust = -0.5, size = 3) +
      labs(title = paste(input$pollutant, "LEVELS FOR",  toupper(input$city)),
           x = "Date", y = input$pollutant) +
      theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
  })
  
  # Boxplot
  output$box_plot <- renderPlot({
    plot_data <- filtered_data()
    ggplot(plot_data, aes(x = as.factor(Date), y = .data[[input$pollutant]], fill = Location)) +
      geom_boxplot() +
      geom_text(aes(label = round(.data[[input$pollutant]], 1)), position = position_dodge(width = 0.75), vjust = -0.5, size = 3) +
      labs(title = paste(input$pollutant, "LEVELS FOR",  toupper(input$city)),
           x = "Date", y = input$pollutant) +
      theme(axis.text.x = element_text(angle = 45, hjust = 1))
  })
  
  # Create a reactive dataset for all cities
  all_cities_data <- reactive({
    mydata %>%
      filter(.data[[input$all_cities_parameter]] > 0)
  })
  
  # Render pie chart for all cities comparison
  output$all_cities_piechart <- renderPlotly({
    if (nrow(all_cities_data()) > 0) {
      plot_data <- all_cities_data()
      plot_ly(plot_data, labels = ~Location, values = ~.data[[input$all_cities_parameter]], type = "pie") %>%
        layout(title = paste("Pie Chart for", input$all_cities_parameter))
    } else {
      # If no data is available, display a message
      plot(NULL, xlim = c(0, 1), ylim = c(0, 1), type = "n", xlab = "", ylab = "")
      text(0.5, 0.5, "No data available for pie chart.", cex = 1.2, col = "red", font = 2)
    }
  })
  
  # Render boxplot for all cities comparison
  output$all_cities_boxplot <- renderPlot({
    if (nrow(all_cities_data()) > 0) {
      plot_data <- all_cities_data()
      ggplot(plot_data, aes(x = Location, y = .data[[input$all_cities_parameter]], fill = Location)) +
        geom_boxplot() +
        geom_text(aes(label = round(.data[[input$all_cities_parameter]], 1)), position = position_dodge(width = 0.75), vjust = -0.5, size = 3) +
        labs(title = paste("Boxplot for", input$all_cities_parameter),
             x = "City", y = input$all_cities_parameter) +
        theme(axis.text.x = element_text(angle = 45, hjust = 1))
    } else {
      # If no data is available, display a message
      plot(NULL, xlim = c(0, 1), ylim = c(0, 1), type = "n", xlab = "", ylab = "")
      text(0.5, 0.5, "No data available for boxplot.", cex = 1.2, col = "red", font = 2)
    }
  })
}
options(shiny.launch.browser = TRUE)  # this ensures images of map is visible no thumbnails in RStudio

# Create Shiny app
shinyApp(ui = ui, server = server)
