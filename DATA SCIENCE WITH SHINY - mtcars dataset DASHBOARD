library(shiny)
library(dplyr)
library(DT)
library(ggplot2)

# Load the mtcars dataset
data(mtcars)

# Define UI
ui <- fluidPage(
  titlePanel("Advanced Data Science App"),
  
  sidebarLayout(
    sidebarPanel(
      # Input: Variable selection for x and y axes
      selectInput("x_var", "X-axis Variable:", choices = colnames(mtcars)),
      selectInput("y_var", "Y-axis Variable:", choices = colnames(mtcars)),
      
      # Input: Plot type selection
      radioButtons("plot_type", "Plot Type:", choices = c("Scatter Plot", "Box Plot")),
      
      # Input: Data filtering
      sliderInput("cyl_filter", "Filter by Cylinders:", min = 4, max = 8, value = c(4, 8))
    ),
    
    mainPanel(
      # Output: Data table
      DTOutput("data_table"),
      
      # Output: Plot
      plotOutput("data_plot"),
      
      # Output: Summary statistics
      verbatimTextOutput("summary_stats")
    )
  )
)

# Define server
server <- function(input, output) {
  # Filter the dataset based on the selected number of cylinders
  filtered_data <- reactive({
    mtcars %>%
      filter(cyl >= input$cyl_filter[1] & cyl <= input$cyl_filter[2])
  })
  
  # Render the interactive data table
  output$data_table <- renderDT({
    datatable(filtered_data(), options = list(pageLength = 10))
  })
  
  # Render the selected plot
  output$data_plot <- renderPlot({
    if (input$plot_type == "Scatter Plot") {
      ggplot(filtered_data(), aes_string(x = input$x_var, y = input$y_var)) +
        geom_point()
    } else {
      ggplot(filtered_data(), aes_string(x = factor(cyl), y = mtcars[[input$y_var]])) +
        geom_boxplot()
    }
  })
  
  # Calculate and display summary statistics
  output$summary_stats <- renderText({
    summary_data <- summary(filtered_data()[, c(input$x_var, input$y_var)])
    paste("Summary Statistics:\n", capture.output(print(summary_data)), collapse = "\n")
  })
}

# Create Shiny app
shinyApp(ui = ui, server = server)
